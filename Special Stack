Design a data-structure SpecialStack that supports all the stack operations like push(), pop(), isEmpty(), isFull() and an additional operation getMin() which should return the
minimum element from the SpecialStack. Your task is to complete all the functions, using a stack data structure.

Note: The output of the code will be the value returned by getMin() function.

Examples:

Input: stack: 18 19 29 15 16
Output: 15
Explanation: The minimum element of the stack is 15.

JAVA CODE:


/*Complete the function(s) below*/
class GfG {
    public void push(int a, Stack<Integer> s) {
        // add code here.
        s.push(a);
    }

    public int pop(Stack<Integer> s) {
        // add code here.
        if(!s.isEmpty()){
            return s.pop();
        }
        return -1;
    }

    public int min(Stack<Integer> s) {
        // add code here.
        if(s.isEmpty()) return -1;
        int min = Integer.MAX_VALUE;
        for(int x : s){
            min = Math.min(min,x);
        }
        return min;
    }

    public boolean isFull(Stack<Integer> s, int n) {
        // add code here.
        return s.size() == n;
    }

    public boolean isEmpty(Stack<Integer> s) {
        // add code here.
        return s.isEmpty();
    }
}
