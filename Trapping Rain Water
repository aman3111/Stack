Given an array arr[] with non-negative integers representing the height of blocks. If the width of each block is 1, compute how much water can be trapped between the blocks
during the rainy season. 

Examples:

Input: arr[] = [3, 0, 1, 0, 4, 0 2]
Output: 10
Explanation: Total water trapped = 0 + 3 + 2 + 3 + 0 + 2 + 0 = 10 units.

Input: arr[] = [3, 0, 2, 0, 4]
Output: 7
Explanation: Total water trapped = 0 + 3 + 1 + 3 + 0 = 7 units.


JAVA CODE:

class Solution {
    public int maxWater(int arr[]) {
        // code here
        int n = arr.length;
        if(n == 0 ) return 0;
        
        int maxleft[] = new int[n];
        int maxRight[] = new int[n];
        
        maxleft[0] = arr[0];
        for(int i = 1;i < n;i++){
            maxleft[i] = Math.max(maxleft[i-1], arr[i]);
        }
        maxRight[n -1] = arr[n - 1];
        for(int i = n - 2;i >= 0;i--){
            maxRight[i] = Math.max(maxRight[i + 1], arr[i]);
        }
        
        int trapedwater = 0;
        for(int i = 0;i < n;i++){
            int water = Math.min(maxleft[i], maxRight[i]) - arr[i];
            trapedwater += water;
        }
        return trapedwater;
    }
}
